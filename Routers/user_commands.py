from aiogram import Router, F
from aiogram.filters.command import Command
from aiogram.types import Message
from aiogram.enums import ChatType
import os
from deep_translator import GoogleTranslator
from pydub import AudioSegment
import time, datetime
from Routers.admin_commands import ADMIN_IDS
from database import get_all_admins

user_router = Router()

"""AudioSegment.converter = "D:\\bots\\coder\\ffmpeg.exe"
AudioSegment.ffmpeg = "D:\\bots\\coder\\ffmpeg.exe"
AudioSegment.ffprobe = "D:\\bots\\coder\\ffprobe.exe" """

# –†–æ—É—Ç–µ—Ä-–ø–∏–Ω–≥. –±–∞–Ω–∞–ª—å–Ω–æ.
@user_router.message(Command('ping'))
@user_router.message(F.text.lower().in_(['–ø–∏–Ω–≥','—Å–æ—Ü–∏–∞–ª—å–Ω—ã–π –ø–∏–Ω–≥-–ø–æ–Ω–≥']))
async def ping_bot(message: Message): # type: ignore
    ev = (datetime.datetime.now(tz=datetime.timezone.utc) - message.date).microseconds / 1000000
    sent_message = await message.answer("ü§ñ –ò–∑–º–µ—Ä—è—é –ø–∏–Ω–≥...")
     # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ä–æ–≥ –¥–ª—è –ø–∏–Ω–≥–∞
    ping_threshold = 50 

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∏–Ω–≥–∞ –∏ –≤—ã–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
    if ev < ping_threshold:
        out = f"üèì –ü–∞—Ä—Ç–∏—è –≤—ã–∏–≥—Ä–∞–ª–∞ –≤ –ø–∏–Ω–≥-–ø–æ–Ω–≥ –∑–∞ <code>{ev}</code> —Å"
    else:
        out = f"üèì –ü–∞—Ä—Ç–∏—è –ø—Ä–æ–∏–≥—Ä–∞–ª–∞ –≤ –ø–∏–Ω–≥-–ø–æ–Ω–≥ –∑–∞ <code>{ev}</code> —Å"
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º
    await sent_message.edit_text(out)
    
# –†–æ—É—Ç–µ—Ä –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
@user_router.message(Command("adminlist"))
@user_router.message(F.text.lower().in_(['–∫—Ç–æ –∞–¥–º–∏–Ω','–∞–¥–º–∏–Ω—ã','–∫—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä','–∫—Ç–æ —Å–º–æ—Ç—Ä–∏—Ç–µ–ª—å','.–ø–∞—Ä—Ç–∏—è']))
async def admin_list_command(message: Message):
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    admins = get_all_admins()
    if not admins:
        await message.answer("–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø—É—Å—Ç.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å HTML-—Ä–∞–∑–º–µ—Ç–∫–æ–π
    admin_list_text = "<b>üéì –ù–∞—à–∏ —Å–º–æ—Ç—Ä–∏—Ç–µ–ª–∏:</b>\n"
    for user_id, first_name in admins:
        admin_list_text += f"- <a href='tg://user?id={user_id}'>{first_name}</a> (ID: {user_id})\n"

    await message.answer(admin_list_text, parse_mode='HTML')

# –†–æ—É—Ç–µ—Ä –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –≥—Å(–∑–∞—Ö–µ–π—á–µ–Ω –ö–∞–µ–º)
"""@user_router.message(Command('voice'))
@user_router.message(F.text.lower().in_('–≤–æ–π—Å'), F.chat.type == ChatType.GROUP)
async def voice_message(message: Message):
    if not message.reply_to_message:
        await message.reply(f'–í—ã –Ω–µ –ø–æ–ø–∞–ª–∏ –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–æ–µ/–≤–∏–¥–µ–æ- —Å–æ–æ–±—â–µ–Ω–∏–µ.')

    if ((not message.reply_to_message.voice) and (not message.reply_to_message.video_note) and
            (not message.reply_to_message.video)):
        await message.reply(f'–û—Ç–≤–µ—Ç–Ω–æ–µ —Å–º—Å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≥–æ–ª–æ—Å–æ–≤—ã–º/–≤–∏–¥–µ–æ —Å–æ–æ–±—â–µ–Ω–∏–µ–º.')

    if message.reply_to_message.voice:
        audio_file_path_ogg = 'voice.ogg'
        audio_file_path_mp3 = 'voice.mp3'
        process_message = await message.reply_to_message.reply('üìù –ü—Ä–æ—Ü–µ—Å—Å –ø–µ—Ä–µ–≤–æ–¥–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ '
                                                               '—Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–ø—É—â–µ–Ω!\nüïê –û–∂–∏–¥–∞–π—Ç–µ. . .')
        file_info = await message.reply_to_message.bot.get_file(message.reply_to_message.voice.file_id)
        file_path = file_info.file_path
        file = await message.reply_to_message.bot.download_file(file_path)
        voice_time = message.reply_to_message.voice.duration

        with open(audio_file_path_ogg, 'wb') as audio_file:
            audio_file.write(file.read())
        audio_segment = AudioSegment.from_ogg(audio_file_path_ogg)
        audio_segment.export(audio_file_path_mp3, format='mp3')

        def format_time(voice_time):
            minutes = voice_time // 60
            seconds = voice_time % 60
            return f"{minutes:02}:{seconds:02}"

        with open(audio_file_path_mp3, 'rb') as audio_file_mp3:
            voice_time_formatted = format_time(voice_time)
            transcription = user_router.audio.transcriptions.create(model='whisper-large-v3', file=audio_file_mp3)
            traslated = GoogleTranslator(source='auto', target='ru').translate(transcription.text)
            await process_message.edit_text(f"üïê <b>{voice_time_formatted}</b>:\n{traslated}")
        os.remove(audio_file_path_ogg)
        os.remove(audio_file_path_mp3)

    elif message.reply_to_message.video_note:
        video_file_path_mp4 = 'video.mp4'
        audio_file_path_mp3 = 'voice.mp3'
        process_message = await message.reply_to_message.reply('üìù –ü—Ä–æ—Ü–µ—Å—Å –ø–µ—Ä–µ–≤–æ–¥–∞ –∫—Ä—É–∂–æ—á–∫–∞ '
                                                               '–∑–∞–ø—É—â–µ–Ω!\nüïê –û–∂–∏–¥–∞–π—Ç–µ. . .')
        file_info = await message.reply_to_message.bot.get_file(message.reply_to_message.video_note.file_id)
        file_path = file_info.file_path
        file = await message.reply_to_message.bot.download_file(file_path)
        voice_time = message.reply_to_message.video_note.duration

        with open(video_file_path_mp4, 'wb') as audio_file:
            audio_file.write(file.read())
        audio_segment = AudioSegment.from_file(video_file_path_mp4)
        audio_segment.export(audio_file_path_mp3, format='mp3')

        def format_time(voice_time):
            minutes = voice_time // 60
            seconds = voice_time % 60
            return f"{minutes:02}:{seconds:02}"

        with open(audio_file_path_mp3, 'rb') as audio_file_mp3:
            voice_time_formatted = format_time(voice_time)
            transcription = user_router.audio.transcriptions.create(model='whisper-large-v3', file=audio_file_mp3)
            traslated = GoogleTranslator(source='auto', target='ru').translate(transcription.text)
            await process_message.edit_text(f"üïê <b>{voice_time_formatted}</b>:\n{traslated}")
        os.remove(video_file_path_mp4)
        os.remove(audio_file_path_mp3)

    elif message.reply_to_message.video:
        video_file_path_mp4 = 'video.mp4'
        audio_file_path_mp3 = 'voice.mp3'
        process_message = await message.reply_to_message.reply('üìù –ü—Ä–æ—Ü–µ—Å—Å –ø–µ—Ä–µ–≤–æ–¥–∞ –≤–∏–¥–µ–æ —Å–æ–æ–±—â–µ–Ω–∏—è '
                                                               '–∑–∞–ø—É—â–µ–Ω!\nüïê –û–∂–∏–¥–∞–π—Ç–µ. . .')
        file_info = await message.reply_to_message.bot.get_file(message.reply_to_message.video.file_id)
        file_path = file_info.file_path
        file = await message.reply_to_message.bot.download_file(file_path)
        voice_time = message.reply_to_message.video.duration

        with open(video_file_path_mp4, 'wb') as audio_file:
            audio_file.write(file.read())
        audio_segment = AudioSegment.from_file(video_file_path_mp4)
        audio_segment.export(audio_file_path_mp3, format='mp3')

        def format_time(voice_time):
            minutes = voice_time // 60
            seconds = voice_time % 60
            return f"{minutes:02}:{seconds:02}"

        with open(audio_file_path_mp3, 'rb') as audio_file_mp3:
            voice_time_formatted = format_time(voice_time)
            transcription = user_router.audio.transcriptions.create(model='whisper-large-v3', file=audio_file_mp3)
            traslated = GoogleTranslator(source='auto', target='ru').translate(transcription.text)
            await process_message.edit_text(f"üïê <b>{voice_time_formatted}</b>:\n{traslated}")
        os.remove(video_file_path_mp4)
        os.remove(audio_file_path_mp3)"""
